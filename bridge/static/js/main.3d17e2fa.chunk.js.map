{"version":3,"sources":["components/WalletConnect.js","components/ThemeButton.jsx","img/redfloki.svg","img/Telegram.svg","img/Twitter.svg","img/Instagram.svg","components/VideoView.jsx","components/NFTItem.jsx","components/actions/convert.js","img/Ethereum-Inventory.svg","img/Binance-Inventory.svg","components/BridgeDashboard.jsx","img/logo.svg","components/ContactUs.jsx","components/Footer.jsx","components/LandingPage.jsx","components/Navbar.jsx","getLibrary.js","components/Connectors.js","App.js","reportWebVitals.js","index.js"],"names":["web3Modal","provider","providerOptions","Button","props","className","loading","disabled","onClick","name","getweb3","a","metamask","id","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","network","qrcodeModalOptions","mobileLinks","Web3Modal","cacheProvider","connect","localStorage","setItem","Web3","eth","getAccounts","then","res","console","log","on","e","error","close","clear","web3","VideoView","autoPlay","loop","NFTItem","staking","width","src","bounce","cssTransition","enter","exit","ethToBscRequest","account","uri","signature","hash","toast","transition","postdata","axios","post","dismiss","success","data","catch","err","response","step","message","delay","bscToEthRequest","EthNFTAddress","abi_config","eth_nft","BscNFTAddress","bsc_nft","EthStakingAddress","eth_staking","BscStakingAddress","bsc_staking","BridgeDashboard","chainIdBuffer","storedAccount","getItem","useState","setAccount","processing","setProcessing","setCahinId","_nftItems","Array","nftItems","openInventory","setOpenInventory","inventoryItems","setInventoryItems","selected","setSelected","selectedURI","setSelectedURI","stakingState","setStakingState","inventoryOnceOpened","setInventoryOnceOpened","lastItemNumber","setLastItemNumber","stakingInfo","setStakingInfo","accordionOpen","setAccordionOpen","setProvider","givenProvider","ethContract","Contract","EthNFTAbi","bscContract","BscNFTAbi","ethStakingContract","StakingAbi","bscStakingContract","currentNetworks","window","ethereum","networkVersion","isEth","isBsc","isConditionOk","net_flag","warning","selectedAddress","getChainId","checkChainId","isNetworkConnected","isRewardConnectionOk","inventoryClose","from","document","getElementsByClassName","map","item","style","backgroundColor","selectItem","getElementById","clearItem","alert","onOpen","onClose","location","reload","getEthNFTs","methods","getTokenIdsByAddress","call","ids","split","shift","value","key","tokenURI","push","url","getBscFNTs","getStakedEthNFTs","tokenIdsByOwner","getStakedBscNFTs","ethStaking","approve","send","stake","bscStaking","getRewardsFromEth","rewardLaunch","events","Reward","returnValues","_amount","Unstaked","getRewardsFromBsc","EthToBsc","personal","sign","utils","sha3","BscToEth","getStakingInfo","_stakingInfo","stakingDuration","rewardCycle","nftContract","rewardTokenContract","rewardTokenName","rewardTokenSymbol","lastRewardTime","nextRewardTime","copyToClipBoard","copyText","navigator","clipboard","writeText","useEffect","addEventListener","accounts","networkId","length","itemBuffer","alt","eth_inventory","bsc_inventory","ContactUs","logo","href","target","Footer","LandingPage","locate","assign","telegram","twitter","instagram","floki","Navbar","setWeb3","isWalletConnected","currentAccount","connectState","setConnecState","undefined","getLibrary","Web3Provider","InjectedConnector","Connectors","NetworkOnlyConnector","connectors","MetaMask","supportedNetworks","Infura","providerURL","App","libraryName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d17e2fa.chunk.js","sourcesContent":["import React, { setState, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nvar web3Modal;\r\nvar provider;\r\nvar providerOptions;\r\nvar defaultAccount;\r\n\r\nconst getweb3 = async () => {\r\n    providerOptions = {\r\n        metamask: {\r\n            id: \"injected\",\r\n            name: \"MetaMask\",\r\n            type: \"injected\",\r\n            check: \"isMetaMask\",\r\n        },\r\n        walletconnect: {\r\n            package: WalletConnectProvider,\r\n            options: {\r\n                infuraId: \"INFURA_ID\",\r\n                network: \"mainnet\",\r\n                qrcodeModalOptions: {\r\n                    mobileLinks: [\r\n                        \"rainbow\",\r\n                        \"metamask\",\r\n                        \"argent\",\r\n                        \"trust\",\r\n                        \"imtoken\",\r\n                        \"pillar\",\r\n                    ],\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    web3Modal = new Web3Modal({\r\n        network: \"mainnet\",\r\n        cacheProvider: false,\r\n        providerOptions,\r\n    });\r\n\r\n    provider = await web3Modal.connect();\r\n\r\n    localStorage.setItem('isWalletConnected', true);\r\n\r\n    new Web3(provider).eth.getAccounts().then((res) => {\r\n        defaultAccount = res[0];\r\n        console.log(\"Got Account\" + res[0]);\r\n        localStorage.setItem('currentAccount', res[0]);\r\n    })\r\n\r\n    provider.on(\"error\", (e) => console.error(\"WS ERROR\", e));\r\n    provider.on(\"end\", (e) => console.error(\"WE END\", e));\r\n\r\n    provider.on(\"disconnect\", (e) => console.log(e));\r\n    provider.on(\"connect\", (e) => console.log(e));\r\n};\r\n\r\nexport const close = async () => {\r\n    provider = null;\r\n    localStorage.clear();\r\n}\r\n\r\nexport var web3 = new Web3(provider);\r\n\r\nexport var account = defaultAccount;\r\n\r\nexport default getweb3;","import React from \"react\";\r\nimport \"../styles/button.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div className={`${props.className} btn-container flex`}>\r\n      {!props.loading ? (\r\n        <button className=\"btn\" onClick={props.onClick}>\r\n          {props.name}\r\n        </button>\r\n      ) : (\r\n        <button className=\"btn btn-disabled\" disabled>\r\n          <div className=\"_loader\">\r\n            <span className=\"let1\">p</span>\r\n            <span className=\"let2\">r</span>\r\n            <span className=\"let3\">c</span>\r\n            <span className=\"let4\">e</span>\r\n            <span className=\"let5\">s</span>\r\n            <span className=\"let6\">s</span>\r\n            <span className=\"let7\">i</span>\r\n            <span className=\"let8\">n</span>\r\n            <span className=\"let9\">g</span>\r\n            <span className=\"let10\">.</span>\r\n            <span className=\"let11\">.</span>\r\n            <span className=\"let12\">.</span>\r\n          </div>\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/redfloki.53659313.svg\";","export default __webpack_public_path__ + \"static/media/Telegram.b8b437ff.svg\";","export default __webpack_public_path__ + \"static/media/Twitter.36331815.svg\";","export default __webpack_public_path__ + \"static/media/Instagram.80807d62.svg\";","import React from \"react\";\r\n\r\nconst VideoView = (props) => {\r\n  return <video autoPlay loop type=\"video/mp4\" {...props}></video>;\r\n};\r\n\r\nexport default VideoView;\r\n","import React from \"react\";\r\nimport VideoView from \"./VideoView\";\r\nimport \"../styles/ribbon.css\";\r\n\r\n\r\nconst NFTItem = (props) => {\r\n  return (\r\n    <div id={`nft-item-${props.id}`} className={`nft-item ${props.className} flex col`} onClick={props.onClick}>\r\n      {props.staking ? \r\n          <div className=\"ribbon-wrapper\">\r\n          <div className=\"ribbon\">STAKED</div>\r\n        </div> : <></>}\r\n      <div className=\"video-view flex\">\r\n        <VideoView className=\"video-preview flex\" width={props.width} src={props.src} />\r\n      </div>\r\n      {/* <Button className=\"select-button\" name={'SELECT THIS NFT'} onClick={props.onClick}/> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NFTItem;\r\n","import axios from 'axios';\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast, cssTransition } from \"react-toastify\";\r\n\r\nconst bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\"\r\n});\r\n\r\nexport const ethToBscRequest = async (account, id, uri, signature, hash) => {\r\n    toast.loading(\"Wait please.\\nServer is processing your request.\", {\r\n        transition: bounce\r\n    });\r\n    const postdata = {\r\n        account: account,\r\n        id: id,\r\n        uri: uri,\r\n        signature: signature,\r\n        hash: hash\r\n    };\r\n    await axios\r\n        .post(`/api/bridge/eth2bsc`, postdata)\r\n        .then(e => {\r\n            console.log(e);\r\n            toast.dismiss();\r\n            toast.success(e.data, {\r\n                transition: bounce\r\n            })\r\n        })\r\n        .catch(err => {\r\n            toast.dismiss()\r\n            var error = err.response.data;\r\n            if (error.step) {\r\n                toast.error(error.message, {\r\n                    transition: bounce,\r\n                    delay: 8\r\n                })\r\n                return;\r\n            }\r\n            toast.error(\"Server is not working. \\n Check your network connection.\", {\r\n                transition: bounce\r\n            })\r\n            console.log(err)\r\n        });\r\n}\r\n\r\nexport const bscToEthRequest = async (account, id, uri, signature, hash) => {\r\n    toast.loading(\"Wait please.\\nServer is processing your request.\", {\r\n        transition: bounce\r\n    });\r\n\r\n    const postdata = {\r\n        account: account,\r\n        id: id,\r\n        uri: uri,\r\n        signature: signature,\r\n        hash: hash\r\n    };\r\n\r\n    await axios\r\n        .post(`/api/bridge/bsc2eth`, postdata)\r\n        .then(e => {\r\n            console.log(e);\r\n            toast.dismiss();\r\n            toast.success(e.data, {\r\n                transition: bounce,\r\n                delay: 8\r\n            })\r\n        })\r\n        .catch(err => {\r\n            toast.dismiss()\r\n            var error = err.response.data;\r\n            if (error.step) {\r\n                toast.error(error.message, {\r\n                    transition: bounce\r\n                })\r\n                return;\r\n            }\r\n            toast.error(\"Server is not working. \\n Check your network connection.\", {\r\n                transition: bounce\r\n            })\r\n            console.log(err);\r\n        });\r\n}","export default __webpack_public_path__ + \"static/media/Ethereum-Inventory.1b02caca.svg\";","export default __webpack_public_path__ + \"static/media/Binance-Inventory.8c1b53ec.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport { web3, account } from \"./WalletConnect\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { ethers } from \"ethers\";\r\nimport { ToastContainer, toast, cssTransition } from \"react-toastify\";\r\nimport NFTItem from \"./NFTItem\";\r\nimport abi_config from \"./contract/config.json\";\r\nimport EthNFTAbi from \"./contract/NFTBase.json\";\r\nimport BscNFTAbi from \"./contract/NFTBase.json\";\r\nimport StakingAbi from \"./contract/StakingBase.json\";\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { ethToBscRequest, bscToEthRequest } from \"./actions/convert\";\r\n\r\nimport eth_inventory from \"../img/Ethereum-Inventory.svg\";\r\nimport bsc_inventory from \"../img/Binance-Inventory.svg\";\r\n\r\nconst EthNFTAddress = abi_config.eth_nft;\r\nconst BscNFTAddress = abi_config.bsc_nft;\r\nconst EthStakingAddress = abi_config.eth_staking;\r\nconst BscStakingAddress = abi_config.bsc_staking;\r\n\r\nconst BridgeDashboard = () => {\r\n  let chainIdBuffer = 0;\r\n\r\n  const connectState = localStorage.getItem(\"isWalletConnected\");\r\n  const storedAccount = localStorage.getItem(\"currentAccount\");\r\n  const [account, setAccount] = useState(storedAccount);\r\n  const [value, setValue] = useState(0);\r\n  const [processing, setProcessing] = useState(false);\r\n  const [chainId, setCahinId] = useState(chainIdBuffer);\r\n  var _nftItems = new Array();\r\n  const [nftItems, setNFTItems] = useState(_nftItems);\r\n  const [openInventory, setOpenInventory] = useState(false);\r\n  const [inventoryItems, setInventoryItems] = useState([]);\r\n  const [selected, setSelected] = useState(null);\r\n  const [selectedURI, setSelectedURI] = useState(null);\r\n  const [stakingState, setStakingState] = useState(null);\r\n  const [inventoryOnceOpened, setInventoryOnceOpened] = useState(false);\r\n  const [lastItemNumber, setLastItemNumber] = useState(0);\r\n  const [stakingInfo, setStakingInfo] = useState({});\r\n  const [accordionOpen, setAccordionOpen] = useState(false);\r\n\r\n  web3.eth.setProvider(web3.givenProvider);\r\n  const ethContract = new web3.eth.Contract(EthNFTAbi, EthNFTAddress);\r\n  const bscContract = new web3.eth.Contract(BscNFTAbi, BscNFTAddress);\r\n  const ethStakingContract = new web3.eth.Contract(StakingAbi, EthStakingAddress);\r\n  const bscStakingContract = new web3.eth.Contract(StakingAbi, BscStakingAddress);\r\n\r\n  const bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\",\r\n  });\r\n\r\n  const currentNetworks = {\r\n    isEth: window.ethereum.networkVersion == 1 || window.ethereum.networkVersion == 4,\r\n    isBsc: window.ethereum.networkVersion == 56 || window.ethereum.networkVersion == 97\r\n  }\r\n\r\n  const isEth = (id) => {\r\n    if(!(id == 1 || id == 4))\r\n      return false;\r\n    else\r\n      return true\r\n  }\r\n\r\n  const isBsc = (id) => {\r\n    if(!(id == 56 || id == 97))\r\n      return false;\r\n    else\r\n      return true;\r\n  }\r\n\r\n  const isConditionOk = async (net_flag) => {\r\n    if (\r\n      !localStorage.getItem(\"isWalletConnected\") ||\r\n      !localStorage.getItem(\"currentAccount\")\r\n    ) {\r\n      toast.warning(\"Please connect your wallet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(window.ethereum.selectedAddress == null) {\r\n      toast.warning(\"Unlock your wallet and connect to it.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    var checkChainId = await web3.eth.getChainId().then(id => {\r\n      if(net_flag == 1 && !isEth(id)){\r\n        toast.warning(\"Switch network to Ethereum.\", {\r\n          transition: bounce,\r\n        });\r\n        return false;\r\n      }\r\n      if(net_flag == 2 && !isBsc(id)) {\r\n        toast.warning(\"Switch network to Binance.\", {\r\n          transition: bounce,\r\n        });\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n    console.log(checkChainId);\r\n    if(!checkChainId) return false;\r\n\r\n    if (!selected) {\r\n      toast.error(\"Please select item!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(stakingState) {\r\n      toast.warning(\"This NFT was staked already!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const isNetworkConnected = () => {\r\n    if (\r\n      !localStorage.getItem(\"isWalletConnected\") ||\r\n      !localStorage.getItem(\"currentAccount\")\r\n    ) {\r\n      toast.warning(\"Please connect your wallet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(window.ethereum.selectedAddress == null) {\r\n      toast.warning(\"Unlock your wallet and connect to it.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const isRewardConnectionOk = async (net_flag) => {\r\n    if (\r\n      !localStorage.getItem(\"isWalletConnected\") ||\r\n      !localStorage.getItem(\"currentAccount\")\r\n    ) {\r\n      toast.warning(\"Please connect your wallet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    if(window.ethereum.selectedAddress == null) {\r\n      toast.warning(\"Unlock your wallet and connect to it.\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n\r\n    await web3.eth.getChainId().then(id => {\r\n      if(net_flag == 1 && !isEth(id)){\r\n        toast.warning(\"Switch network to Ethereum.\", {\r\n          transition: bounce,\r\n        });\r\n        return false;\r\n      }else if(net_flag == 2 && !isBsc(id)) {\r\n        toast.warning(\"Switch network to Binance.\", {\r\n          transition: bounce,\r\n        });\r\n      }\r\n    })\r\n\r\n    return true;\r\n  }\r\n\r\n  const inventoryOpen = () => {\r\n    if (\r\n      !localStorage.getItem(\"isWalletConnected\") ||\r\n      !localStorage.getItem(\"currentAccount\")\r\n    ) {\r\n      toast.warning(\"Please connect your wallet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n    if(!nftItems.length > 0) {\r\n      toast.warning(\"Inventory has not any item yet!\", {\r\n        transition: bounce,\r\n      });\r\n      return false;\r\n    }\r\n    if(!inventoryOnceOpened || nftItems.length != lastItemNumber) {\r\n      setLastItemNumber(nftItems.length);\r\n      setInventoryOnceOpened(true);\r\n      var itemBuffer = new Array();\r\n      nftItems.map((item, key) => {\r\n        console.log(key, item)\r\n        itemBuffer.push(<NFTItem key={key} id={item.id} src={item.url} className={item.id == selected ? 'selected-item' : ''} width=\"90%\" staking={item.staking ? true : false} onClick={(e) => selectItem(item.id, item.url, item.staking)}/>);\r\n      })\r\n      setInventoryItems(itemBuffer);\r\n    }\r\n    setOpenInventory(!openInventory);\r\n  }\r\n\r\n  const inventoryClose = () => {\r\n    setOpenInventory(false);\r\n    const prevElements = Array.from(document.getElementsByClassName('nft-item'));\r\n    prevElements.map((item) => {\r\n      item.style.backgroundColor = '#d8d7d7';\r\n    })\r\n    setSelected(null);\r\n    setSelectedURI(null);\r\n  }\r\n\r\n  const selectItem = (id, uri, staking) => {\r\n    const prevElements = Array.from(document.getElementsByClassName('nft-item'));\r\n    prevElements.map((item) => {\r\n      item.style.backgroundColor = '#d8d7d7';\r\n    })\r\n    setSelected(id);\r\n    setSelectedURI(uri);\r\n    setStakingState(staking);\r\n    document.getElementById(`nft-item-${id}`).style.backgroundColor = '#fa4444';\r\n  }\r\n\r\n  const clearItem = (alert, type) => {\r\n    //const networkVersion = window.ethereum.networkVersion;\r\n    // var i = _nftItems.indexOf(id);\r\n    // delete _nftItems[i];\r\n    //setInventoryOnceOpened(false);\r\n    // setNFTItems(_nftItems);\r\n    // if(networkVersion == 1 || networkVersion == 4) {\r\n    //   getEthNFTs();\r\n    //   getStakedEthNFTs();\r\n    // } else if(networkVersion == 56 || networkVersion == 97) {\r\n    //   getBscFNTs();\r\n    //   getStakedBscNFTs();\r\n    // }\r\n    switch(type) {\r\n      case 'success':\r\n        toast.success(`${alert}`, {\r\n          transition: bounce,\r\n          onOpen: () => inventoryClose(),\r\n          onClose: () => window.location.reload()\r\n        });\r\n        break;\r\n      case 'warning':\r\n        toast.warning(`${alert}`, {\r\n          transition: bounce,\r\n          onOpen: () => inventoryClose(),\r\n          onClose: () => window.location.reload()\r\n        });\r\n        break;\r\n      case 'error':\r\n        toast.error(`${alert}`, {\r\n          transition: bounce,\r\n          onOpen: () => inventoryClose(),\r\n          onClose: () => window.location.reload()\r\n        });\r\n        break;\r\n      default :\r\n      toast.success(`${alert}`, {\r\n        transition: bounce,\r\n        onOpen: () => inventoryClose(),\r\n        onClose: () => window.location.reload()\r\n      });\r\n    }\r\n    //setSelected(null);\r\n    //setSelectedURI(null);\r\n  }\r\n\r\n  const getEthNFTs = () => {\r\n    if(!isNetworkConnected()) return false;\r\n\r\n    try {\r\n      ethContract.methods.getTokenIdsByAddress(account).call((err, data) => {\r\n        if(!data) return false;\r\n        var ids = data.split(\",\");\r\n        ids.shift();\r\n        ids.map((value, key) => {\r\n          ethContract.methods.tokenURI(value).call((err, data) => {\r\n            console.log(data);\r\n            _nftItems.push({url: `https://gateway.pinata.cloud/ipfs/${data}`, id: value});\r\n            console.log(key, _nftItems);\r\n          });\r\n        });\r\n      }).catch((e) => {\r\n        console.log(e);\r\n      });\r\n    } catch (e) {\r\n      toast.error(\"Network error!\", {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getBscFNTs = () => {\r\n    if(!isNetworkConnected()) return false;\r\n\r\n    try {\r\n      bscContract.methods.getTokenIdsByAddress(account).call((err, data) => {\r\n        if(!data) return false;\r\n        var ids = data.split(\",\");\r\n        ids.shift();\r\n        ids.map((value, key) => {\r\n          bscContract.methods.tokenURI(value).call((err, data) => {\r\n            console.log(data);\r\n            _nftItems.push({url: `https://gateway.pinata.cloud/ipfs/${data}`, id: value});\r\n            console.log(key, _nftItems);\r\n          });\r\n        });\r\n      }).catch((e) => {\r\n        console.log(e)\r\n      });\r\n    } catch (e) {\r\n      toast.error(\"Network error!\", {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  }\r\n\r\n  const getStakedEthNFTs = () => {\r\n    if(!isNetworkConnected()) return false;\r\n    try {\r\n      ethStakingContract.methods.tokenIdsByOwner(account).call((err, data) => {\r\n        if(!data) return false;\r\n        data.map((value, key) => {\r\n          ethContract.methods.tokenURI(value).call((err, data) => {\r\n            console.log(data);\r\n            _nftItems.push({url: `https://gateway.pinata.cloud/ipfs/${data}`, id: value, staking: true});\r\n            console.log(key, _nftItems);\r\n          });\r\n        });\r\n      }).catch((e) => {\r\n        console.log(e);\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      toast.error(\"Network error!\", {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getStakedBscNFTs = () => {\r\n    if(!isNetworkConnected()) return false;\r\n\r\n    try {\r\n      bscStakingContract.methods.tokenIdsByOwner(account).call((err, data) => {\r\n        if(!data) return false;\r\n        data.map((value, key) => {\r\n          bscContract.methods.tokenURI(value).call((err, data) => {\r\n            console.log(data);\r\n            _nftItems.push({url: `https://gateway.pinata.cloud/ipfs/${data}`, id: value, staking: true});\r\n            console.log(key, _nftItems);\r\n          });\r\n        });\r\n      }).catch((e) => {\r\n        console.log(e)\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      toast.error(\"Network error!\", {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  };\r\n\r\n  const ethStaking = async () => {\r\n    if(!await isConditionOk(1)) return false;\r\n    console.log(\"eth staking...\");\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n    setProcessing(true);\r\n    await ethContract.methods.approve(EthStakingAddress, selected).send({from: account}).on('receipt', async () => {\r\n      await ethStakingContract.methods.stake(selected).send({from: account});\r\n      setProcessing(false);\r\n      clearItem('Successfully staked.', 'success');\r\n    })\r\n  };\r\n\r\n  const bscStaking = async () => {\r\n    if(!await isConditionOk(2)) return false;\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n    setProcessing(true);\r\n    await bscContract.methods.approve(BscStakingAddress, selected).send({from: account}).on('receipt', async () => {\r\n      await bscStakingContract.methods.stake(selected).send({from: account});\r\n      setProcessing(false);\r\n      clearItem('Successfully staked.', 'sucess');\r\n    })\r\n  };\r\n\r\n  const getRewardsFromEth = async () => {\r\n    if(!await isRewardConnectionOk(1)) return false;\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n    try {\r\n      setProcessing(true);\r\n      await ethStakingContract.methods.rewardLaunch().send({from: account}).then((e) => {\r\n        console.log(e)\r\n        if(e.events.Reward) {\r\n          toast.success(`You earned ${e.events.Reward.returnValues._amount} from staking.`, {\r\n            transition: bounce,\r\n            onClose: () => window.location.reload()\r\n          });\r\n        }\r\n        if(e.events.Unstaked) {\r\n          toast.success(`Your NFT (ItemId: ${e.events.Reward.returnValues._amount}) was unstaked.`, {\r\n            transition: bounce,\r\n            onClose: () => window.location.reload()\r\n          });\r\n        }\r\n        setProcessing(false);\r\n      })\r\n    } catch (e) {\r\n      console.log(e);\r\n      setProcessing(false);\r\n      toast.error(`You have not any staked NFT.`, {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  }\r\n\r\n  const getRewardsFromBsc = async () => {\r\n    if(!await isRewardConnectionOk(2)) return false;\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n    try {\r\n      setProcessing(true);\r\n      await bscStakingContract.methods.rewardLaunch().send({from: account}).then((e) => {\r\n        console.log(e)\r\n        if(e.events.Reward) {\r\n          toast.success(`You earned ${e.events.Reward.returnValues._amount} from staking.`, {\r\n            transition: bounce,\r\n            onClose: ()=> window.location.reload()\r\n          });\r\n        }\r\n        if(e.events.Unstaked) {\r\n          toast.success(`Your NFT (ItemId: ${e.events.Reward.returnValues._amount}) was unstaked.`, {\r\n            transition: bounce,\r\n            onClose: ()=> window.location.reload()\r\n          });\r\n        }\r\n        setProcessing(false);\r\n      })\r\n    } catch (e) {\r\n      console.log(e);\r\n      setProcessing(false);\r\n      toast.error(`You have not any staked NFT.`, {\r\n        transition: bounce,\r\n      });\r\n    }\r\n  }\r\n\r\n  const launchStaking = () => {\r\n    if(currentNetworks.isEth)\r\n      ethStaking();\r\n    else if(currentNetworks.isBsc)\r\n      bscStaking();\r\n  }\r\n\r\n  const getRewards = () => {\r\n    if(currentNetworks.isEth)\r\n      getRewardsFromEth();\r\n    else if(currentNetworks.isBsc)\r\n      getRewardsFromBsc();\r\n  }\r\n\r\n  const EthToBsc = async () => {\r\n    if(!await isConditionOk(1)) return false;\r\n    //Sign message...\r\n    console.log(selected);\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n\r\n    await web3.eth.personal\r\n      .sign(web3.utils.sha3(`Sign with id: ${selected}`), account)\r\n      .then(async (e) => {\r\n        console.log(`Item${selected} ETHFloki sent to convert`);\r\n        setProcessing(true);\r\n        await ethToBscRequest(\r\n          account,\r\n          selected,\r\n          selectedURI,\r\n          e,\r\n          web3.utils.sha3(`Sign with id: ${selected}`)\r\n        );\r\n        setProcessing(false);\r\n        clearItem('Successfully converted.', 'success');\r\n      });\r\n  };\r\n  const BscToEth = async () => {\r\n    if(!await isConditionOk(2)) return false;\r\n    //Sign message...\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n\r\n    await web3.eth.personal\r\n      .sign(web3.utils.sha3(`Sign with id: ${selected}`), account)\r\n      .then(async (e) => {\r\n        console.log(`Item${selected} BSCFloki sent to convert`);\r\n        setProcessing(true);\r\n        await bscToEthRequest(\r\n          account,\r\n          selected,\r\n          selectedURI,\r\n          e,\r\n          web3.utils.sha3(`Sign with id: ${selected}`)\r\n        );\r\n        setProcessing(false);\r\n        clearItem('Successfully converted.', 'success');\r\n      });\r\n  };\r\n\r\n  const getStakingInfo = () => {\r\n    const account = localStorage.getItem(\"currentAccount\");\r\n    if(currentNetworks.isEth && window.ethereum.selectedAddress) {\r\n      ethStakingContract.methods.stakingInfo(account).call((err, data) => {\r\n        const _stakingInfo = {\r\n          stakingDuration: data[0],\r\n          rewardCycle: data[1],\r\n          nftContract: data[2],\r\n          rewardTokenContract: data[3],\r\n          rewardTokenName: data[4],\r\n          rewardTokenSymbol: data[5],\r\n          lastRewardTime: data[6],\r\n          nextRewardTime: data[7]\r\n        };\r\n        setStakingInfo(_stakingInfo);\r\n      }).catch((e) => {\r\n        console.log(e)\r\n      })\r\n    } else if (currentNetworks.isBsc) {\r\n      bscStakingContract.methods.stakingInfo(account).call((err, data) => {\r\n        const _stakingInfo = {\r\n          stakingDuration: data[0],\r\n          rewardCycle: data[1],\r\n          nftContract: data[2],\r\n          rewardTokenContract: data[3],\r\n          rewardTokenName: data[4],\r\n          rewardTokenSymbol: data[5],\r\n          lastRewardTime: data[6],\r\n          nextRewardTime: data[7]\r\n        };\r\n        setStakingInfo(_stakingInfo);\r\n      }).catch((e) => {\r\n        console.log(e)\r\n      })\r\n    }\r\n  }\r\n\r\n  const copyToClipBoard = (id) => {\r\n    const copyText = document.getElementById(id);\r\n    navigator.clipboard.writeText(copyText.value);\r\n    toast.success(\"Address copied.\", {\r\n      transition: bounce,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('offline', () => {\r\n      toast.warning(`You disconnected from internet.`, {\r\n        transition: bounce,\r\n        onOpen: () => {\r\n          toast.loading(\"Reconnecting... Please wait.\", {\r\n            transition: bounce,\r\n            onClick: () => window.location.reload()\r\n          });\r\n        }\r\n      });\r\n    });\r\n    window.addEventListener('online', () => {\r\n      toast.dismiss();\r\n      toast.success(\"Internet connected successfully.\", {\r\n        transition: bounce,\r\n      });\r\n    })\r\n\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      setAccount(accounts[0]);\r\n      localStorage.setItem(\"currentAccount\", accounts[0]);\r\n      clearItem('You changed your account.', 'warning');\r\n      web3.eth.getChainId().then(id => {\r\n        chainIdBuffer = id;\r\n        if(id == 1 || id == 4){\r\n          getEthNFTs();\r\n          getStakedEthNFTs();\r\n          getStakingInfo();\r\n        }\r\n        else if(id == 56 || id ==97){\r\n          getBscFNTs();\r\n          getStakedBscNFTs();\r\n          getStakingInfo();\r\n        }\r\n        else\r\n          toast.warning(\"Switch network to Ethereum or BSC!\", {\r\n            transition: bounce,\r\n          });\r\n      })\r\n    });\r\n\r\n    window.ethereum.on(\"networkChanged\", (networkId) => {\r\n      setCahinId(networkId);\r\n      console.log(networkId);\r\n      localStorage.setItem(\"currentNetwork\", networkId);\r\n      clearItem('You changed network.', 'warning');\r\n      web3.eth.getChainId().then(id => {\r\n        chainIdBuffer = id;\r\n        if(id == 1 || id == 4){\r\n          getEthNFTs();\r\n          getStakedEthNFTs();\r\n          getStakingInfo();\r\n        }\r\n        else if(id == 56 || id ==97){\r\n          getBscFNTs();\r\n          getStakedBscNFTs();\r\n          getStakingInfo();\r\n        }\r\n        else\r\n          toast.warning(\"Switch network to Ethereum or BSC!\", {\r\n            transition: bounce,\r\n          });\r\n      })\r\n    });\r\n\r\n    web3.eth.getChainId().then(id => {\r\n      chainIdBuffer = id;\r\n      if(id == 1 || id == 4){\r\n        getEthNFTs();\r\n        getStakedEthNFTs();\r\n        getStakingInfo();\r\n      }\r\n      else if(id == 56 || id == 97){\r\n        getBscFNTs();\r\n        getStakedBscNFTs();\r\n        getStakingInfo();\r\n      }\r\n      else\r\n        toast.warning(\"Switch network to Ethereum or BSC!\", {\r\n          transition: bounce,\r\n        });\r\n    })\r\n  }, []);\r\n  return (\r\n    <div className=\"dashboard-container flex\">\r\n      <div className=\"bridge-dashboard flex col\">\r\n        <div className=\"nft-items flex\">\r\n          <div className=\"inventory-header flex\">\r\n            <div className=\"css-3d-text2 flex\">NFT BRIDGE</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"dashboard flex col\">\r\n          <h2 className=\"flex\">Browse your items in inventory.</h2>\r\n          <div className=\"input-area flex\">\r\n            <Button\r\n              name={openInventory ? 'Close Inventory' : 'Open Inventory'}\r\n              loading={processing}\r\n              onClick={!openInventory ? inventoryOpen : inventoryClose}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"separator flex col\">\r\n          <div className=\"hr\"> </div>\r\n        </div>\r\n        <div className=\"eth-to-bnb flex col\">\r\n          <h2 className=\"flex\">Move your Red Floki from Ethereum to Binance</h2>\r\n          <div className=\"button-area flex\">\r\n            <Button\r\n              name=\"Click here and convert NFT from ETH to BSC\"\r\n              loading={processing}\r\n              onClick={EthToBsc}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"separator flex col\">\r\n          <div className=\"hr\"> </div>\r\n        </div>\r\n        <div className=\"bnb-to-eth flex col\">\r\n          <h2 className=\"flex\">Move your Red Floki from Binance to Ethereum</h2>\r\n          <div className=\"button-area flex\">\r\n            <Button\r\n              name=\"Click here and convert NFT from BSC to ETH\"\r\n              loading={processing}\r\n              onClick={BscToEth}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"separator flex col\">\r\n          <div className=\"hr\"> </div>\r\n        </div>\r\n        <div className=\"bnb-to-eth flex col\">\r\n          <h2 className=\"flex\">Move your Red Floki to Staking Pool</h2>\r\n          <div className=\"staking-info flex col\">\r\n            <div className=\"staking-info-header flex\" onClick={() => setAccordionOpen(!accordionOpen)}>\r\n              Staking Details\r\n            </div>\r\n            <div className={`staking-info-body ${accordionOpen ? 'extend' : 'collapse'} flex col`}>\r\n              <div className=\"flex col\">\r\n                <div className=\"flex\">Staking Duration: { stakingInfo.stakingDuration / 3600 /24  } day</div>\r\n                <div className=\"flex\">Reward Cycle: { stakingInfo.rewardCycle /3600 /24 } day</div>\r\n              </div>\r\n              <div className=\"flex col contract-address\">\r\n                <div className=\"contract-address flex\" onClick={() => copyToClipBoard('nftContractAddress')}>NFT Contract Address:</div>\r\n                <div className=\"flex\" id=\"nftContractAddress\">{ stakingInfo.nftContract }</div>\r\n              </div>\r\n              <div className=\"contract-address flex col\" onClick={() => copyToClipBoard('tokenContractAddress')}>\r\n                <div className=\"contract-address flex\">Reward Token Address</div> \r\n                <div className=\"flex\" id=\"tokenContractAddress\">{stakingInfo.rewardTokenContract}</div>\r\n              </div>\r\n              <div className=\"flex col\">\r\n                <div className=\"flex\">Token Name: {stakingInfo.rewardTokenName}</div>\r\n                <div className=\"flex\">Token Symbol: {stakingInfo.rewardTokenSymbol}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"button-area staking-button-area flex\">\r\n            <Button\r\n              name=\"Start NFT Staking\"\r\n              className=\"btn-staking\"\r\n              loading={processing}\r\n              onClick={launchStaking}\r\n            />\r\n            <Button\r\n              name=\"Get Reward Token\"\r\n              className=\"btn-staking\"\r\n              loading={processing}\r\n              onClick={getRewards}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={`inventory-panel ${openInventory ? 'inventory-opened' : 'inventory-closed'}   gradient-border flex col`}>\r\n        <div className=\"inventory-panel-header flex\">\r\n          {\r\n            currentNetworks.isEth ? <img alt=\"ETH INVENTORY\" className=\"eth-inventory\" width=\"100%\" src={eth_inventory}/> : <img alt=\"BSC INVENTORY\" className=\"bsc-inventory\" width=\"100%\" src={bsc_inventory}/>\r\n          }\r\n        </div>\r\n        <div className=\"inventory-panel-body flex\">\r\n          {inventoryItems}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BridgeDashboard;\r\n","export default __webpack_public_path__ + \"static/media/logo.5137f794.svg\";","import React from \"react\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nconst ContactUs = () => {\r\n  return (\r\n    <div className=\"footer flex col\">\r\n      <div className=\"contact-us flex\">\r\n        <div className=\"about-redfloki flex col\">\r\n          <div className=\"flex\">\r\n            <img alt=\"Red Floki\" src={logo} />\r\n          </div>\r\n          <div className=\"flex\">\r\n            <p className=\"sub-text\">\r\n              Red Floki is a Deflationary Token That Charges Tx Fees On\r\n              Everything But Buys. The Fees Charged On All Non-Buy Transactions\r\n              Help Reward And Protect All HOLDRs.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"community flex col\">\r\n          <h3 className=\"h3 red flex\">Community</h3>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://twitter.com/Red_Floki\"\r\n              target=\"_blank\"\r\n            >\r\n              Twitter\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://www.instagram.com/Red_Floki/\"\r\n              target=\"_blank\"\r\n            >\r\n              Intagram\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a className=\"flex\" href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n              Telegram\r\n            </a>\r\n          </p>\r\n        </div>\r\n        <div className=\"resource flex col\">\r\n          <h3 className=\"h3 red flex\">Recources</h3>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://poocoin.app/tokens/0x2a3e1d095f2902c9b6da1bff7813a7b2fc65c3da\"\r\n              target=\"_blank\"\r\n            >\r\n              Chart\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://bscscan.com/token/0x2A3E1D095F2902C9B6Da1bFF7813a7B2fc65C3dA\"\r\n              target=\"_blank\"\r\n            >\r\n              Contract\r\n            </a>\r\n          </p>\r\n          <p className=\"social-link flex\">\r\n            <a\r\n              className=\"flex\"\r\n              href=\"https://redfloki.com/Red-Floki-Audit.pdf\"\r\n              target=\"_blank\"\r\n            >\r\n              Security Audit\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactUs;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer-bottom flex\">\r\n      <p>Copyright &copy; 2021 Red Floki. All Rights Reserved.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport \"../styles/button.css\";\r\nimport floki from \"../img/redfloki.svg\";\r\nimport telegram from \"../img/Telegram.svg\";\r\nimport twitter from \"../img/Twitter.svg\";\r\nimport instagram from \"../img/Instagram.svg\";\r\nimport BridgeDashboard from \"./BridgeDashboard\";\r\nimport ContactUs from \"./ContactUs\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst LandingPage = () => {\r\n  const locate = (url) => {\r\n    window.location.assign(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storeScroll = () => {\r\n      let perc =\r\n        (window.scrollY / (document.body.clientHeight - window.innerHeight)) *\r\n        100;\r\n      document.documentElement.setAttribute(\"style\", `--scrollpos: ${perc}`);\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      {/* <Particle params={particlesConfig} className=\"App-particles__container\" /> */}\r\n      <div className=\"landing-page flex col\">\r\n        <div className=\"main-stack-color bridge-header flex row\">\r\n          <div className=\"bridge-workspace flex col\">\r\n            <div className=\"title-banner flex col\">\r\n              <h1 className=\"h1 flex\">Ethereum - Binance Smart Chain Bridge</h1>\r\n            </div>\r\n            <div className=\"description flex\">\r\n              <p className=\"text flex\">\r\n                Red Floki is a Deflationary Token That Charges Tx Fees On\r\n                Everything But Buys. The Fees Charged On All Non-Buy\r\n                Transactions Help Reward And Protect All HOLDRs.\r\n              </p>\r\n            </div>\r\n            <div className=\"button-area flex\">\r\n              <Button\r\n                name=\"Check Bscscan\"\r\n                onClick={() =>\r\n                  locate(\r\n                    \"https://bscscan.com/token/0x2A3E1D095F2902C9B6Da1bFF7813a7B2fc65C3dA\"\r\n                  )\r\n                }\r\n              />\r\n              <Button\r\n                name=\"Chart\"\r\n                onClick={() =>\r\n                  locate(\r\n                    \"https://poocoin.app/tokens/0x2a3e1d095f2902c9b6da1bff7813a7b2fc65c3da\"\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"social-area flex\">\r\n              <div className=\"telegram flex\">\r\n                <a href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Telegram\" src={telegram} />\r\n                </a>\r\n              </div>\r\n              <div className=\"twitter flex\">\r\n                <a href=\"https://twitter.com/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Twitter\" src={twitter} />\r\n                </a>\r\n              </div>\r\n              <div className=\"instagram flex\">\r\n                <a href=\"https://t.me/Red_Floki\" target=\"_blank\">\r\n                  <img alt=\"Instagram\" src={instagram} />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"floki-wallpaper flex\">\r\n            <img\r\n              alt=\"Red Floki\"\r\n              className=\"redfloki-main-character\"\r\n              src={floki}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"adfloki flex\">\r\n          <img className=\"adfloki-character\" src={adfloki} />\r\n        </div> */}\r\n      </div>\r\n      <div className=\"dashboard-section flex\">\r\n        <div className=\"landing-page landing-bridge-dashboard flex\">\r\n          <BridgeDashboard />\r\n        </div>\r\n      </div>\r\n      <ContactUs />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Button from \"./ThemeButton\";\r\nimport logo from \"../img/logo.svg\";\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { ToastContainer, toast, cssTransition } from \"react-toastify\";\r\nimport { close } from \"./WalletConnect\";\r\nimport getweb3 from \"./WalletConnect\";\r\n\r\nimport \"animate.css/animate.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Navbar = () => {\r\n  const [web3, setWeb3] = useState(null);\r\n  const isWalletConnected = localStorage.getItem(\"isWalletConnected\");\r\n  const currentAccount = localStorage.getItem(\"currentAccount\");\r\n  const [connectState, setConnecState] = useState(\r\n    isWalletConnected && currentAccount\r\n  );\r\n\r\n  const bounce = cssTransition({\r\n    enter: \"animate__animated animate__bounceIn\",\r\n    exit: \"animate__animated animate__bounceOut\",\r\n  });\r\n\r\n  const connect = async () => {\r\n    if (!connectState && (!currentAccount || currentAccount == undefined)) {\r\n      setWeb3(getweb3);\r\n      setConnecState(true);\r\n    } else {\r\n      close();\r\n      setConnecState(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if(window.ethereum.selectedAddress == null) {\r\n      toast.warning(\"Unlock your wallet and connect to it.\", {\r\n        transition: bounce,\r\n      });\r\n      close();\r\n      setConnecState(false);\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"header flex\">\r\n      <div className=\"header-content flex\">\r\n        <div className=\"logo-container flex\">\r\n          <img alt=\"Red Floki\" className=\"logo flex\" src={logo} />\r\n        </div>\r\n        <div className=\"button-area flex\">\r\n          <Button\r\n            name=\"Go Back\"\r\n            onClick={() => window.location.assign(\"/Inventory\")}\r\n          />\r\n          <Button\r\n            name={connectState ? \"Disconnect\" : \"Connect Wallet\"}\r\n            onClick={connect}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { ExternalProvider, JsonRpcFetchFunc } from \"@ethersproject/providers\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\n\r\nconst getLibrary = (provider) => {\r\n    return new Web3Provider(provider);\r\n}\r\n\r\nexport default getLibrary;","import { Connectors } from \"web3-react\";\r\n\r\nconst { InjectedConnector, NetworkOnlyConnector } = Connectors;\r\n\r\nconst MetaMask = new InjectedConnector({ supportedNetworks: [1, 4, 56, 97] });\r\n\r\nconst Infura = new NetworkOnlyConnector({\r\n    providerURL: \"https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\",\r\n});\r\n\r\nconst connectors = { MetaMask, Infura };\r\nexport default connectors;","import './App.css';\nimport './Responsive.App.css';\nimport LandingPage from './components/LandingPage';\nimport Navbar from \"./components/Navbar\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { ToastContainer, cssTransition } from 'react-toastify';\nimport getLibrary from './getLibrary';\nimport connectors from './components/Connectors';\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst App = () => {\n\n  const bounce = cssTransition({\n    enter: \"animate__animated animate__bounceIn\",\n    exit: \"animate__animated animate__bounceOut\"\n  });\n\n  return (\n    <Web3ReactProvider connectors={connectors} getLibrary={getLibrary} libraryName={'ethers.js' | 'web3.js' | null}>\n      <div className=\"App flex col\">\n        <Navbar />\n        <LandingPage />\n      </div>\n      <ToastContainer transition={bounce} />\n    </Web3ReactProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}